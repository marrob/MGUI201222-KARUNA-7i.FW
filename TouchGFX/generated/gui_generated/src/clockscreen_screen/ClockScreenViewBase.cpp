/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/clockscreen_screen/ClockScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <BitmapDatabase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


ClockScreenViewBase::ClockScreenViewBase() :
    flexButtonCallback(this, &ClockScreenViewBase::flexButtonCallbackHandler),
    updateItemCallback(this, &ClockScreenViewBase::updateItemCallbackHandler)
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    __background.setPosition(0, 0, 1024, 600);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    box1.setPosition(0, 0, 1024, 600);
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    btnSetupClock.setBoxWithBorderPosition(0, 0, 500, 90);
    btnSetupClock.setBorderSize(1);
    btnSetupClock.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 0, 0), touchgfx::Color::getColorFromRGB(32, 32, 32), touchgfx::Color::getColorFromRGB(100, 100, 100), touchgfx::Color::getColorFromRGB(100, 100, 100));
    btnSetupClock.setText(TypedText(T___SINGLEUSE_AYJC));
    btnSetupClock.setTextPosition(-20, 20, 500, 90);
    btnSetupClock.setTextColors(touchgfx::Color::getColorFromRGB(150, 118, 73), touchgfx::Color::getColorFromRGB(64, 64, 64));
    btnSetupClock.setPosition(519, 505, 500, 90);
    btnSetupClock.setAction(flexButtonCallback);

    btnBack.setBoxWithBorderPosition(0, 0, 500, 90);
    btnBack.setBorderSize(1);
    btnBack.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 0, 0), touchgfx::Color::getColorFromRGB(32, 32, 32), touchgfx::Color::getColorFromRGB(100, 100, 100), touchgfx::Color::getColorFromRGB(100, 100, 100));
    btnBack.setBitmaps(Bitmap(BITMAP_GOBACK_ID), Bitmap(BITMAP_GOBACK_ID));
    btnBack.setBitmapXY(20, 5);
    btnBack.setText(TypedText(T___SINGLEUSE_IKXG));
    btnBack.setTextPosition(-20, 20, 500, 90);
    btnBack.setTextColors(touchgfx::Color::getColorFromRGB(150, 118, 73), touchgfx::Color::getColorFromRGB(64, 64, 64));
    btnBack.setPosition(5, 505, 500, 90);
    btnBack.setAction(flexButtonCallback);

    boxWithBorder1.setPosition(5, 100, 1014, 400);
    boxWithBorder1.setColor(touchgfx::Color::getColorFromRGB(25, 25, 25));
    boxWithBorder1.setBorderColor(touchgfx::Color::getColorFromRGB(100, 100, 100));
    boxWithBorder1.setBorderSize(1);

    lblTitle.setPosition(0, 10, 1024, 80);
    lblTitle.setColor(touchgfx::Color::getColorFromRGB(128, 128, 128));
    lblTitle.setLinespacing(0);
    lblTitle.setTypedText(touchgfx::TypedText(T___SINGLEUSE_DUXL));

    containerClock.setPosition(15, 110, 995, 381);

    contClockSettings.setPosition(17, 49, 631, 284);

    boxWithBorder2.setPosition(0, 0, 631, 285);
    boxWithBorder2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    boxWithBorder2.setBorderColor(touchgfx::Color::getColorFromRGB(100, 100, 100));
    boxWithBorder2.setBorderSize(2);
    contClockSettings.add(boxWithBorder2);

    scrollMonth.setPosition(88, 74, 100, 200);
    scrollMonth.setHorizontal(false);
    scrollMonth.setCircular(false);
    scrollMonth.setEasingEquation(touchgfx::EasingEquations::circEaseOut);
    scrollMonth.setSwipeAcceleration(10);
    scrollMonth.setDragAcceleration(10);
    scrollMonth.setNumberOfItems(12);
    scrollMonth.setSelectedItemOffset(72);
    scrollMonth.setSelectedItemExtraSize(0, 0);
    scrollMonth.setSelectedItemMargin(5, 5);
    scrollMonth.setDrawableSize(50, 0);
    scrollMonth.setDrawables(scrollMonthListItems, updateItemCallback,
                              scrollMonthSelectedListItems, updateItemCallback);
    scrollMonth.animateToItem(1, 0);
    contClockSettings.add(scrollMonth);

    scrollDay.setPosition(5, 74, 100, 200);
    scrollDay.setHorizontal(false);
    scrollDay.setCircular(false);
    scrollDay.setEasingEquation(touchgfx::EasingEquations::circEaseOut);
    scrollDay.setSwipeAcceleration(30);
    scrollDay.setDragAcceleration(10);
    scrollDay.setNumberOfItems(31);
    scrollDay.setSelectedItemOffset(70);
    scrollDay.setSelectedItemExtraSize(0, 0);
    scrollDay.setSelectedItemMargin(5, 5);
    scrollDay.setDrawableSize(50, 0);
    scrollDay.setDrawables(scrollDayListItems, updateItemCallback,
                              scrollDaySelectedListItems, updateItemCallback);
    scrollDay.animateToItem(0, 0);
    contClockSettings.add(scrollDay);

    scrollYear.setPosition(204, 74, 100, 200);
    scrollYear.setHorizontal(false);
    scrollYear.setCircular(false);
    scrollYear.setEasingEquation(touchgfx::EasingEquations::circEaseOut);
    scrollYear.setSwipeAcceleration(10);
    scrollYear.setDragAcceleration(10);
    scrollYear.setNumberOfItems(100);
    scrollYear.setSelectedItemOffset(72);
    scrollYear.setSelectedItemExtraSize(0, 0);
    scrollYear.setSelectedItemMargin(5, 5);
    scrollYear.setDrawableSize(50, 0);
    scrollYear.setDrawables(scrollYearListItems, updateItemCallback,
                              scrollYearSelectedListItems, updateItemCallback);
    scrollYear.animateToItem(22, 0);
    contClockSettings.add(scrollYear);

    scrollHour.setPosition(357, 74, 100, 200);
    scrollHour.setHorizontal(false);
    scrollHour.setCircular(false);
    scrollHour.setEasingEquation(touchgfx::EasingEquations::circEaseOut);
    scrollHour.setSwipeAcceleration(10);
    scrollHour.setDragAcceleration(10);
    scrollHour.setNumberOfItems(24);
    scrollHour.setSelectedItemOffset(72);
    scrollHour.setSelectedItemExtraSize(0, 0);
    scrollHour.setSelectedItemMargin(5, 5);
    scrollHour.setDrawableSize(50, 0);
    scrollHour.setDrawables(scrollHourListItems, updateItemCallback,
                              scrollHourSelectedListItems, updateItemCallback);
    scrollHour.animateToItem(1, 0);
    contClockSettings.add(scrollHour);

    scrollMin.setPosition(445, 74, 100, 200);
    scrollMin.setHorizontal(false);
    scrollMin.setCircular(false);
    scrollMin.setEasingEquation(touchgfx::EasingEquations::circEaseOut);
    scrollMin.setSwipeAcceleration(30);
    scrollMin.setDragAcceleration(10);
    scrollMin.setNumberOfItems(60);
    scrollMin.setSelectedItemOffset(72);
    scrollMin.setSelectedItemExtraSize(0, 0);
    scrollMin.setSelectedItemMargin(5, 5);
    scrollMin.setDrawableSize(50, 0);
    scrollMin.setDrawables(scrollMinListItems, updateItemCallback,
                              scrollMinSelectedListItems, updateItemCallback);
    scrollMin.animateToItem(1, 0);
    contClockSettings.add(scrollMin);

    scrollSec.setPosition(531, 74, 100, 200);
    scrollSec.setHorizontal(false);
    scrollSec.setCircular(false);
    scrollSec.setEasingEquation(touchgfx::EasingEquations::circEaseOut);
    scrollSec.setSwipeAcceleration(30);
    scrollSec.setDragAcceleration(10);
    scrollSec.setNumberOfItems(60);
    scrollSec.setSelectedItemOffset(72);
    scrollSec.setSelectedItemExtraSize(0, 0);
    scrollSec.setSelectedItemMargin(5, 5);
    scrollSec.setDrawableSize(50, 0);
    scrollSec.setDrawables(scrollSecListItems, updateItemCallback,
                              scrollSecSelectedListItems, updateItemCallback);
    scrollSec.animateToItem(1, 0);
    contClockSettings.add(scrollSec);

    lblClockDay.setXY(27, 10);
    lblClockDay.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblClockDay.setLinespacing(0);
    lblClockDay.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NJLN));
    contClockSettings.add(lblClockDay);

    lblClockMonth.setXY(98, 10);
    lblClockMonth.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblClockMonth.setLinespacing(0);
    lblClockMonth.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9VLR));
    contClockSettings.add(lblClockMonth);

    lblClockYear.setXY(228, 10);
    lblClockYear.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblClockYear.setLinespacing(0);
    lblClockYear.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9I9C));
    contClockSettings.add(lblClockYear);

    lblClockHour.setXY(378, 10);
    lblClockHour.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblClockHour.setLinespacing(0);
    lblClockHour.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NP4N));
    contClockSettings.add(lblClockHour);

    lblClockMin.setXY(472, 10);
    lblClockMin.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblClockMin.setLinespacing(0);
    lblClockMin.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6A9X));
    contClockSettings.add(lblClockMin);

    lblClockSec.setXY(560, 10);
    lblClockSec.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblClockSec.setLinespacing(0);
    lblClockSec.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9D4M));
    contClockSettings.add(lblClockSec);

    lineHeader.setPosition(0, 57, 631, 17);
    lineHeaderPainter.setColor(touchgfx::Color::getColorFromRGB(64, 64, 64));
    lineHeader.setPainter(lineHeaderPainter);
    lineHeader.setStart(0, 0);
    lineHeader.setEnd(920, 1);
    lineHeader.setLineWidth(2);
    lineHeader.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
    contClockSettings.add(lineHeader);

    lineSelector0.setPosition(27, 143, 576, 15);
    lineSelector0Painter.setColor(touchgfx::Color::getColorFromRGB(64, 64, 64));
    lineSelector0.setPainter(lineSelector0Painter);
    lineSelector0.setStart(0, 0);
    lineSelector0.setEnd(920, 1);
    lineSelector0.setLineWidth(2);
    lineSelector0.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
    contClockSettings.add(lineSelector0);

    lineSelector1.setPosition(27, 198, 576, 15);
    lineSelector1Painter.setColor(touchgfx::Color::getColorFromRGB(64, 64, 64));
    lineSelector1.setPainter(lineSelector1Painter);
    lineSelector1.setStart(0, 0);
    lineSelector1.setEnd(920, 1);
    lineSelector1.setLineWidth(2);
    lineSelector1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
    contClockSettings.add(lineSelector1);
    containerClock.add(contClockSettings);

    lineSelector0_1.setPosition(678, 297, 294, 15);
    lineSelector0_1Painter.setColor(touchgfx::Color::getColorFromRGB(64, 64, 64));
    lineSelector0_1.setPainter(lineSelector0_1Painter);
    lineSelector0_1.setStart(0, 0);
    lineSelector0_1.setEnd(920, 1);
    lineSelector0_1.setLineWidth(2);
    lineSelector0_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
    containerClock.add(lineSelector0_1);

    lbClockCurrentDate.setXY(728, 114);
    lbClockCurrentDate.setColor(touchgfx::Color::getColorFromRGB(100, 100, 100));
    lbClockCurrentDate.setLinespacing(0);
    lbClockCurrentDate.setTypedText(touchgfx::TypedText(T___SINGLEUSE_3USL));
    containerClock.add(lbClockCurrentDate);

    lbClockCurrentTime.setXY(758, 172);
    lbClockCurrentTime.setColor(touchgfx::Color::getColorFromRGB(100, 100, 100));
    lbClockCurrentTime.setLinespacing(0);
    lbClockCurrentTime.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HFD2));
    containerClock.add(lbClockCurrentTime);

    lblDateTime.setXY(665, 227);
    lblDateTime.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblDateTime.setLinespacing(0);
    Unicode::snprintf(lblDateTimeBuffer, LBLDATETIME_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_U9MK).getText());
    lblDateTime.setWildcard(lblDateTimeBuffer);
    lblDateTime.resizeToCurrentText();
    lblDateTime.setTypedText(touchgfx::TypedText(T___SINGLEUSE_PJKD));
    containerClock.add(lblDateTime);

    lineSelector0_1_1.setPosition(678, 77, 294, 15);
    lineSelector0_1_1Painter.setColor(touchgfx::Color::getColorFromRGB(64, 64, 64));
    lineSelector0_1_1.setPainter(lineSelector0_1_1Painter);
    lineSelector0_1_1.setStart(0, 0);
    lineSelector0_1_1.setEnd(920, 1);
    lineSelector0_1_1.setLineWidth(2);
    lineSelector0_1_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
    containerClock.add(lineSelector0_1_1);

    add(__background);
    add(box1);
    add(btnSetupClock);
    add(btnBack);
    add(boxWithBorder1);
    add(lblTitle);
    add(containerClock);
}

void ClockScreenViewBase::setupScreen()
{
    scrollMonth.initialize();
    for (int i = 0; i < scrollMonthListItems.getNumberOfDrawables(); i++)
    {
        scrollMonthListItems[i].initialize();
    }
    for (int i = 0; i < scrollMonthSelectedListItems.getNumberOfDrawables(); i++)
    {
        scrollMonthSelectedListItems[i].initialize();
    }
    scrollDay.initialize();
    for (int i = 0; i < scrollDayListItems.getNumberOfDrawables(); i++)
    {
        scrollDayListItems[i].initialize();
    }
    for (int i = 0; i < scrollDaySelectedListItems.getNumberOfDrawables(); i++)
    {
        scrollDaySelectedListItems[i].initialize();
    }
    scrollYear.initialize();
    for (int i = 0; i < scrollYearListItems.getNumberOfDrawables(); i++)
    {
        scrollYearListItems[i].initialize();
    }
    for (int i = 0; i < scrollYearSelectedListItems.getNumberOfDrawables(); i++)
    {
        scrollYearSelectedListItems[i].initialize();
    }
    scrollHour.initialize();
    for (int i = 0; i < scrollHourListItems.getNumberOfDrawables(); i++)
    {
        scrollHourListItems[i].initialize();
    }
    for (int i = 0; i < scrollHourSelectedListItems.getNumberOfDrawables(); i++)
    {
        scrollHourSelectedListItems[i].initialize();
    }
    scrollMin.initialize();
    for (int i = 0; i < scrollMinListItems.getNumberOfDrawables(); i++)
    {
        scrollMinListItems[i].initialize();
    }
    for (int i = 0; i < scrollMinSelectedListItems.getNumberOfDrawables(); i++)
    {
        scrollMinSelectedListItems[i].initialize();
    }
    scrollSec.initialize();
    for (int i = 0; i < scrollSecListItems.getNumberOfDrawables(); i++)
    {
        scrollSecListItems[i].initialize();
    }
    for (int i = 0; i < scrollSecSelectedListItems.getNumberOfDrawables(); i++)
    {
        scrollSecSelectedListItems[i].initialize();
    }
}

void ClockScreenViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &btnSetupClock)
    {
        //SetClockTime
        //When btnSetupClock clicked call virtual function
        //Call SetClockTime
        SetClockTime();
    }
    else if (&src == &btnBack)
    {
        //ShowSettings
        //When btnBack clicked change screen to SettingsScreen
        //Go to SettingsScreen with no screen transition
        application().gotoSettingsScreenScreenNoTransition();
    }
}

void ClockScreenViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
    if (items == &scrollMonthListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        textContainer* cc = (textContainer*)d;
        scrollMonthUpdateItem(*cc, itemIndex);
    }
    else if (items == &scrollMonthSelectedListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        TextContainerHigh* cc = (TextContainerHigh*)d;
        scrollMonthUpdateCenterItem(*cc, itemIndex);
    }
    if (items == &scrollDayListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        textContainer* cc = (textContainer*)d;
        scrollDayUpdateItem(*cc, itemIndex);
    }
    else if (items == &scrollDaySelectedListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        TextContainerHigh* cc = (TextContainerHigh*)d;
        scrollDayUpdateCenterItem(*cc, itemIndex);
    }
    if (items == &scrollYearListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        textContainer* cc = (textContainer*)d;
        scrollYearUpdateItem(*cc, itemIndex);
    }
    else if (items == &scrollYearSelectedListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        TextContainerHigh* cc = (TextContainerHigh*)d;
        scrollYearUpdateCenterItem(*cc, itemIndex);
    }
    if (items == &scrollHourListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        textContainer* cc = (textContainer*)d;
        scrollHourUpdateItem(*cc, itemIndex);
    }
    else if (items == &scrollHourSelectedListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        TextContainerHigh* cc = (TextContainerHigh*)d;
        scrollHourUpdateCenterItem(*cc, itemIndex);
    }
    if (items == &scrollMinListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        textContainer* cc = (textContainer*)d;
        scrollMinUpdateItem(*cc, itemIndex);
    }
    else if (items == &scrollMinSelectedListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        TextContainerHigh* cc = (TextContainerHigh*)d;
        scrollMinUpdateCenterItem(*cc, itemIndex);
    }
    if (items == &scrollSecListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        textContainer* cc = (textContainer*)d;
        scrollSecUpdateItem(*cc, itemIndex);
    }
    else if (items == &scrollSecSelectedListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        TextContainerHigh* cc = (TextContainerHigh*)d;
        scrollSecUpdateCenterItem(*cc, itemIndex);
    }
}
