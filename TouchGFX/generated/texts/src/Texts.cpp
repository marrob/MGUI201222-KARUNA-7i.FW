/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/TextProvider.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/TypedText.hpp>
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
    va_end(pArg);
    return width;
}

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
    va_end(pArg);
    return width;
}

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
    {
        substituteGlyphs();
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
}

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
    va_list pArg;
    va_start(pArg, format);
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
    va_end(pArg);
}

//Default typed text database
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE = {
    0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x4f, 0x75, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x49, 0x32, 0x53, 0x20, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x0, // @0 "Enable MasterClock Out on I2S output."
    0x44, 0x61, 0x73, 0x20, 0x43, 0x6c, 0x6f, 0x63, 0x20, 0x55, 0x61, 0x72, 0x74, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x3a, 0x20, 0x0, // @38 "Das Cloc Uart Error counter : "
    0x53, 0x65, 0x74, 0x20, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x20, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x20, 0xa, 0x2e, 0x0, // @69 "Set display auto sleep Time ?."
    0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x61, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x2e, 0x0, // @100 "Enable all output at startup."
    0x4c, 0x61, 0x73, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x61, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x2e, 0x0, // @130 "Last output state at startup."
    0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x68, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x3a, 0x20, 0x20, 0x0, // @160 "Clock heated temperature :  "
    0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x72, 0x20, 0x5b, 0x31, 0x20, 0x6d, 0x69, 0x6e, 0x5d, 0x0, // @189 "Enable Screensaver [1 min]"
    0x42, 0x75, 0x73, 0x20, 0x55, 0x61, 0x72, 0x74, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x3a, 0x20, 0x0, // @216 "Bus Uart Error counter : "
    0x4f, 0x43, 0x58, 0x4f, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x68, 0x65, 0x61, 0x74, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x3a, 0x0, // @242 "OCXO main heat current :"
    0x32, 0x33, 0x2e, 0x30, 0x38, 0x2e, 0x32, 0x30, 0x32, 0x32, 0x20, 0x2d, 0x20, 0x32, 0x30, 0x2e, 0x30, 0x38, 0x2e, 0x32, 0x30, 0x32, 0x32, 0x0, // @267 "23.08.2022 - 20.08.2022"
    0x4f, 0x43, 0x58, 0x4f, 0x20, 0x31, 0x20, 0x20, 0x68, 0x65, 0x61, 0x74, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x3a, 0x20, 0x0, // @291 "OCXO 1  heat current : "
    0x4f, 0x43, 0x58, 0x4f, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x3a, 0x0, // @315 "OCXO main temperature :"
    0x4f, 0x43, 0x58, 0x4f, 0x20, 0x31, 0x20, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x3a, 0x20, 0x0, // @339 "OCXO 1  temperature : "
    0x4f, 0x43, 0x58, 0x4f, 0x32, 0x20, 0x20, 0x68, 0x65, 0x61, 0x74, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x3a, 0x20, 0x0, // @362 "OCXO2  heat current : "
    0x54, 0x68, 0x65, 0x20, 0x50, 0x49, 0x4e, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x0, // @385 "The PIN is not correct"
    0x4f, 0x43, 0x58, 0x4f, 0x20, 0x32, 0x20, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x3a, 0x0, // @408 "OCXO 2  temperature :"
    0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x0, // @430 "Temperature ranges : "
    0x44, 0x53, 0x44, 0x20, 0x2d, 0x20, 0x31, 0x62, 0x69, 0x74, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x34, 0x4d, 0x48, 0x7a, 0x20, 0x0, // @452 "DSD - 1bit - 2.4MHz "
    0x54, 0x69, 0x6d, 0x65, 0x20, 0x54, 0x6f, 0x20, 0x4f, 0x66, 0x66, 0x20, 0x20, 0x2, 0x0, // @473 "Time To Off  <>"
    0x30, 0x36, 0x2e, 0x30, 0x36, 0x2e, 0x32, 0x30, 0x32, 0x32, 0x20, 0x30, 0x39, 0x3a, 0x35, 0x30, 0x3a, 0x33, 0x36, 0x0, // @488 "06.06.2022 09:50:36"
    0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x3a, 0x0, // @508 "Firmware version :"
    0x42, 0x6f, 0x6f, 0x74, 0x75, 0x70, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x3a, 0x20, 0x0, // @527 "Bootup counter : "
    0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x20, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x20, 0x3a, 0x20, 0x0, // @545 "Supply voltage : "
    0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x3a, 0x20, 0x0, // @563 "Uptime counter : "
    0x30, 0x31, 0x2e, 0x30, 0x31, 0x2e, 0x32, 0x30, 0x32, 0x32, 0x20, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x0, // @581 "01.01.2022 00:00"
    0x32, 0x31, 0x2e, 0x30, 0x36, 0x2e, 0x32, 0x30, 0x32, 0x32, 0x20, 0x32, 0x30, 0x3a, 0x33, 0x35, 0x0, // @598 "21.06.2022 20:35"
    0x4b, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x20, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x0, // @615 "Karuna Reference"
    0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x0, // @632 "Factory default"
    0x44, 0x61, 0x74, 0x65, 0x20, 0x3a, 0x20, 0x2, 0x0, // @648 "Date : <>"
    0x53, 0x65, 0x74, 0x20, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x0, // @657 "Set Clock time"
    0x53, 0x65, 0x74, 0x20, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x0, // @672 "Set clock time"
    0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x3a, 0x20, 0x0, // @687 "Brightness : "
    0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x61, 0x74, 0x65, 0x0, // @701 "Current date"
    0x44, 0x65, 0x62, 0x75, 0x67, 0x20, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x0, // @714 "Debug screen"
    0x4d, 0x43, 0x4c, 0x4b, 0x20, 0x4f, 0x55, 0x54, 0x3a, 0x20, 0x4f, 0x4e, 0x0, // @727 "MCLK OUT: ON"
    0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x0, // @740 "Please enter"
    0x74, 0x68, 0x65, 0x20, 0x50, 0x49, 0x4e, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x0, // @753 "the PIN code"
    0x2, 0x20, 0x6d, 0x41, 0x0, // @766 "<> mA"
    0x2, 0x20, 0xb0, 0x43, 0x0, // @771 "<> ?C"
    0x43, 0x4f, 0x52, 0x45, 0x20, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x0, // @776 "CORE AUDIO"
    0x50, 0x72, 0x65, 0x76, 0x2e, 0x20, 0x50, 0x61, 0x67, 0x65, 0x0, // @787 "Prev. Page"
    0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x4f, 0x46, 0x46, 0x0, // @798 "Screen OFF"
    0x53, 0x6f, 0x66, 0x74, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x0, // @809 "Soft reset"
    0x33, 0x35, 0x38, 0x2e, 0x32, 0x20, 0x6b, 0x48, 0x7a, 0x0, // @820 "358.2 kHz"
    0x2, 0x20, 0x56, 0x0, // @830 "<> V"
    0x44, 0x41, 0x53, 0x20, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x0, // @834 "DAS Clock"
    0x4e, 0x65, 0x78, 0x74, 0x20, 0x50, 0x61, 0x67, 0x65, 0x0, // @844 "Next Page"
    0x4f, 0x66, 0x66, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x0, // @854 "Off timer"
    0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x4f, 0x4e, 0x0, // @864 "Screen ON"
    0x2, 0x25, 0x0, // @874 "<>%"
    0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0xa, 0x0, // @877 "Devices?"
    0x61, 0x6e, 0x64, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x0, // @886 "and time"
    0x31, 0x32, 0x30, 0x20, 0x6d, 0x69, 0x6e, 0x0, // @895 "120 min"
    0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x0, // @903 "Devices"
    0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x0, // @911 "Display"
    0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x0, // @919 "Service"
    0x31, 0x30, 0x20, 0x6d, 0x69, 0x6e, 0x0, // @927 "10 min"
    0x33, 0x30, 0x20, 0x6d, 0x69, 0x6e, 0x0, // @934 "30 min"
    0x33, 0x32, 0x20, 0x62, 0x69, 0x74, 0x0, // @941 "32 bit"
    0x36, 0x30, 0x20, 0x6d, 0x69, 0x6e, 0x0, // @948 "60 min"
    0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x0, // @955 "FORMAT"
    0x4b, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x0, // @962 "Karuna"
    0x31, 0x20, 0x6d, 0x69, 0x6e, 0x0, // @969 "1 min"
    0x35, 0x20, 0x6d, 0x69, 0x6e, 0x0, // @975 "5 min"
    0x44, 0x45, 0x50, 0x54, 0x48, 0x0, // @981 "DEPTH"
    0x44, 0x49, 0x5f, 0x31, 0x30, 0x0, // @987 "DI_10"
    0x44, 0x49, 0x5f, 0x31, 0x31, 0x0, // @993 "DI_11"
    0x44, 0x49, 0x5f, 0x31, 0x32, 0x0, // @999 "DI_12"
    0x44, 0x49, 0x5f, 0x31, 0x33, 0x0, // @1005 "DI_13"
    0x44, 0x49, 0x5f, 0x31, 0x34, 0x0, // @1011 "DI_14"
    0x44, 0x49, 0x5f, 0x31, 0x35, 0x0, // @1017 "DI_15"
    0x44, 0x65, 0x62, 0x75, 0x67, 0x0, // @1023 "Debug"
    0x45, 0x52, 0x52, 0x4f, 0x52, 0x0, // @1029 "ERROR"
    0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x0, // @1035 "Month"
    0x41, 0x49, 0x5f, 0x30, 0x0, // @1041 "AI_0"
    0x41, 0x49, 0x5f, 0x31, 0x0, // @1046 "AI_1"
    0x41, 0x49, 0x5f, 0x32, 0x0, // @1051 "AI_2"
    0x41, 0x49, 0x5f, 0x33, 0x0, // @1056 "AI_3"
    0x42, 0x61, 0x63, 0x6b, 0x0, // @1061 "Back"
    0x44, 0x49, 0x5f, 0x30, 0x0, // @1066 "DI_0"
    0x44, 0x49, 0x5f, 0x31, 0x0, // @1071 "DI_1"
    0x44, 0x49, 0x5f, 0x32, 0x0, // @1076 "DI_2"
    0x44, 0x49, 0x5f, 0x33, 0x0, // @1081 "DI_3"
    0x44, 0x49, 0x5f, 0x34, 0x0, // @1086 "DI_4"
    0x44, 0x49, 0x5f, 0x35, 0x0, // @1091 "DI_5"
    0x44, 0x49, 0x5f, 0x36, 0x0, // @1096 "DI_6"
    0x44, 0x49, 0x5f, 0x37, 0x0, // @1101 "DI_7"
    0x44, 0x49, 0x5f, 0x38, 0x0, // @1106 "DI_8"
    0x44, 0x49, 0x5f, 0x39, 0x0, // @1111 "DI_9"
    0x44, 0x4f, 0x5f, 0x30, 0x0, // @1116 "DO_0"
    0x44, 0x4f, 0x5f, 0x31, 0x0, // @1121 "DO_1"
    0x44, 0x4f, 0x5f, 0x32, 0x0, // @1126 "DO_2"
    0x44, 0x4f, 0x5f, 0x33, 0x0, // @1131 "DO_3"
    0x44, 0x4f, 0x5f, 0x34, 0x0, // @1136 "DO_4"
    0x44, 0x4f, 0x5f, 0x35, 0x0, // @1141 "DO_5"
    0x44, 0x4f, 0x5f, 0x36, 0x0, // @1146 "DO_6"
    0x44, 0x4f, 0x5f, 0x37, 0x0, // @1151 "DO_7"
    0x46, 0x52, 0x45, 0x51, 0x0, // @1156 "FREQ"
    0x48, 0x6f, 0x75, 0x72, 0x0, // @1161 "Hour"
    0x49, 0x4e, 0x46, 0x4f, 0x0, // @1166 "INFO"
    0x57, 0x41, 0x52, 0x4e, 0x0, // @1171 "WARN"
    0x59, 0x65, 0x61, 0x72, 0x0, // @1176 "Year"
    0x31, 0x30, 0x30, 0x0, // @1181 "100"
    0x31, 0x32, 0x38, 0x0, // @1185 "128"
    0x44, 0x61, 0x79, 0x0, // @1189 "Day"
    0x44, 0x6f, 0x50, 0x0, // @1193 "DoP"
    0x47, 0x55, 0x49, 0x0, // @1197 "GUI"
    0x4c, 0x6f, 0x67, 0x0, // @1201 "Log"
    0x4d, 0x69, 0x6e, 0x0, // @1205 "Min"
    0x53, 0x65, 0x63, 0x0, // @1209 "Sec"
    0x2d, 0xa, 0x0, // @1213 "-?"
    0x4f, 0x4b, 0x0, // @1216 "OK"
    0x2b, 0x0 // @1219 "+"
};
TEXT_LOCATION_FLASH_PRAGMA
KEEP extern uint32_t const indicesGb[] TEXT_LOCATION_FLASH_ATTRIBUTE;

//array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[1] = { 0 };

//Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] = {
    indicesGb
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
    {
        if (languagesArray[id] != 0)
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}
